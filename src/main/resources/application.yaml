spring:

  config:
    import: optional:file:.env

  jackson:
    deserialization:
      fail-on-unknown-properties: false
#    default-property-inclusion: non_null

  datasource:
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    url: ${DEFAULT.DB_URL}
    username: ${DEFAULT.DB_USERNAME}
    password: ${DEFAULT.DB_PASSWORD}

  servlet:
    multipart:
      max-file-size: 15MB
      max-request-size: 150MB

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${SOCIAL.GOOGLE.CLIENT_ID}
            client-secret: ${SOCIAL.GOOGLE.SECRET}
            scope:
              - email
              - profile
          kakao:
            client-id: ${SOCIAL.KAKAO.CLIENT_ID}
            client-secret: ${SOCIAL.KAKAO.SECRET}
            client-authentication-method: client_secret_post #쿼리스트링 client-id, client-secret 날아간다.
            authorization-grant-type: authorization_code #권한부여 유형 (인가코드 > access-token를 받는 방식을 선택)
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            #redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            scope:
              - account_email
            client-name: Kakao
          naver:
            client-id: ${SOCIAL.NAVER.CLIENT_ID}
            client-secret: ${SOCIAL.NAVER.SECRET}
            client-authentication-method: client_secret_post #쿼리스트링 client-id, client-secret 날아간다.
            authorization-grant-type: authorization_code #권한부여 유형 (인가코드 > access-token를 받는 방식을 선택)
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            # redirect-uri: http://localhost:8080/login/oauth2/code/naver
            scope:
              - email
            client-name: Naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-info-authentication-method: header #사용자 정보를 가져올 때 토큰을 보내는 방법, 속성값(header, form, query), header가 기본값
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize #소셜 로그인 버튼을 눌렀을 때 이동할 URL
            token-uri: https://nid.naver.com/oauth2.0/token #사용자 서비스 서버가 Redirect URI로 전달받은 (인가 코드)로 (액세스 토큰)을 요청하는 URI
            user-info-uri: https://openapi.naver.com/v1/nid/me #서비스 서버가 발급받은 액세스 토큰으로 사용자 정보를 가져오는 URI 입니다.
            user-name-attribute: response

  profiles:
    active: dev

  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true  # JPA 만든 쿼리문 로그에 출력해줘
    properties:
      hibernate:
        column_ordering_strategy: legacy
        format_sql: true  # 로그 찍을 때 보기 편하게 포맷팅해서 출력해줘
    #database-platform: org.hibernate.spatial.dialect.mysql.MySQL8SpatialDialect
    #database-platform: org.hibernate.dialect.MariaDB103Dialect
    #database-platform: org.hibernate.dialect.MariaDBDialect


mybatis:
  mapper-locations: mappers/**/*.xml

springdoc:
  api-docs:
    version: openapi_3_1
  swagger-ui:
    path: /swagger
    operations-sorter: method
    default-model-expand-depth: 10
    default-models-expand-depth: 10
    display-request-duration: true
    tags-sorter: alpha
    doc-expansion: none
  cache:
    disabled: true

file:
  directory: ${DEFAULT.FILE_DIRECTORY}


# custom 속성 지정
app:
  jwt:
    secret: ${JWT_SECRET}
    header-schema-name: authorization
    token-type: Bearer

    #AT - 만료시간(ms) - 30분
    access-token-expiry: 1_800_000_000_000_000

    #RT - 만료시간(ms) - 15일
    refresh-token-cookie-name: refresh-token
    refresh-token-expiry: 1_296_000_000
  oauth2:
    base-uri: /oauth2/authorization
    authorization-request-cookie-name: oauth2_auth_request
    redirect-uri-param-cookie-name: redirect_uri
    cookie-expiry-seconds: 180
    authorized-redirect-uris: #OAuth2 처리시 허용한 FE리다이렉트 주소값
      - http://localhost:3000/oauth/sns-signup
      - http://localhost:8080/oauth/redirect
      - http://192.168.0.144:5124/oauth/redirect #내부 도커서버 IP
      - http://112.222.157.156:5124/oauth/redirect #외부 IP

management:
  endpoints:
    web:
      exposure:
        include: "*"
  info:
    java:
      enabled: true
    os:
      enabled: true
    env:
      enabled: true
  server:
    port: 8080

coolsms:
  api:
    key: ${COOLSMS.API_KEY}
    secret: ${COOLSMS.API_SECRET}

---


spring:
  config:
    activate:
      on-profile: tdd
  datasource:
    url: ${TDD.DB_URL}
  sql:
    init:
      mode: always
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

---

spring:
  datasource:
    url: ${PROD.DB_URL}
    username: ${PROD.DB_USERNAME}
    password: ${PROD.DB_PASSWORD}
  config:
    activate:
      on-profile: prod

file:
  directory: ${PROD.FILE_DIRECTORY}

app:
  oauth2:
    authorized-redirect-uris:
      - http://localhost:3000/sns-signup
      - http://localhost:8080/oauth/redirect
      - http://localhost:8080/sns-signup
      - http://192.168.0.144:5124/oauth/redirect #내부 도커서버 IP
      - http://112.222.157.156:5124/oauth/redirect #외부 IP
      - http://112.222.157.156:5124/sns-signup